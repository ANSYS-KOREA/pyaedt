# -*- coding: utf-8 -*-
"""
* * * This script is meant to run in IronPython within the Ansys Electronics Desktop. * * *

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

This script executes the CPython script ``Lib/console_setup.py``.
The ``console_setup.py`` script sets up the HFSS variable based on the command line arguments and kicks off an
interactive Python session.

"""
import os
import sys

sys.path.append(os.path.normpath(os.path.dirname(os.path.realpath(__file__))))
from Lib import pyaedt_toolkit_methods

is_linux = os.name == "posix"

if is_linux:
    import subprocessdotnet as subprocess
else:
    import subprocess


def main():
    # Launch file
    version = oDesktop.GetVersion()[2:6].replace(".", "")
    current_dir = os.path.dirname(os.path.abspath(os.path.realpath(__file__)))
    pyaedt_toolkit_dir = os.path.normpath(os.path.join(current_dir, r"##TOOLKIT_REL_LIB_DIR##"))
    python_exe = r"##IPYTHON_EXE##" % version
    pyaedt_script = os.path.join(pyaedt_toolkit_dir, "console_setup.py")
    pyaedt_toolkit_methods.check_file(oDesktop, python_exe)
    pyaedt_toolkit_methods.check_file(oDesktop, pyaedt_script)
    if is_linux:
        term = get_linux_terminal()
        if not term:
            pyaedt_toolkit_methods.show_error(oDesktop, "No Terminals found.")

        pyaedt_toolkit_methods.set_linux_environment(oDesktop)

        command = [
            term,
            "-e",
            python_exe,
            "-i",
            pyaedt_script,
            str(oDesktop.GetProcessID()),
            str(oDesktop.GetVersion()[:6]),
        ]
        subprocess.Popen(command)
    else:
        command = [
            '"{}"'.format(python_exe),
            "-i",
            '"{}"'.format(pyaedt_script),
            str(oDesktop.GetProcessID()),
            str(oDesktop.GetVersion()[:6]),
        ]
        subprocess.Popen(" ".join(command))


def get_linux_terminal():
    for terminal in ["x-terminal-emulator", "konsole", "xterm", "gnome-terminal", "lxterminal", "mlterm"]:
        term = which(terminal)
        if term:
            return term
    return None


def which(program):
    # http://stackoverflow.com/a/377028
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


if __name__ == "__main__":
    main()
