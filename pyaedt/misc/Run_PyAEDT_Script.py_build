# -*- coding: utf-8 -*-
"""
* * * This script is meant to run in IronPython within the Ansys Electronics Desktop. * * *
The script provides for choosing the Python script to execute.

It looks for a reference to a Python interpreter in the ``python_interpreter.bat`` file.

It then uses this Python interpreter to execute the script.
See the declaration of the command variable to see the order in which arguments are passed to the script.

The commands allow the launched script to still reference the project and design that was active when the script
was launched as well as the AEDT instance that has them open.

"""
import os
import sys

from System.Windows.Forms import OpenFileDialog

sys.path.append(os.path.normpath(os.path.dirname(os.path.realpath(__file__))))
from Lib import pyaedt_toolkit_methods

is_linux = os.name == "posix"
script_name = os.path.splitext(os.path.basename(__file__))[0]

if is_linux:
    import subprocessdotnet as subprocess
else:
    import subprocess


def main():
    oProject = oDesktop.GetActiveProject()

    # Choose file to launch
    file_dialog = OpenFileDialog()
    file_dialog.InitialDirectory = oProject.GetPath()
    file_dialog.Filter = "python files (*.py)|*.py"
    ret = file_dialog.ShowDialog()
    debug("ret: " + repr(ret))

    try:
        if ret == ret.OK:
            # launch file
            version = oDesktop.GetVersion()[2:6].replace(".", "")
            python_exe = r"##PYTHON_EXE##" % version
            pyaedt_script = file_dialog.FileName
            pyaedt_toolkit_methods.check_file(oDesktop, python_exe)
            pyaedt_toolkit_methods.check_file(oDesktop, pyaedt_script)
            if is_linux:
                pyaedt_toolkit_methods.set_linux_environment(oDesktop)

                command = [
                    python_exe,
                    pyaedt_script,
                    str(oDesktop.GetProcessID()),
                    str(oDesktop.GetVersion()[:6]),
                ]
                subprocess.Popen(command)
            else:
                command = [
                    '"{}"'.format(python_exe),
                    '"{}"'.format(pyaedt_script),
                    str(oDesktop.GetProcessID()),
                    str(oDesktop.GetVersion()[:6]),
                ]
                subprocess.Popen(" ".join(command))
        else:
            debug("ret didn't pass the equivalence. ret:" + repr(ret))
    except Exception as e:
        pyaedt_toolkit_methods.show_error(oDesktop, str(e))


def debug(msg):
    print("[debug] {}: {}".format(script_name, str(msg)))
    LogDebug("{}: {}\n".format(script_name, str(msg)))


if __name__ == "__main__":
    main()
